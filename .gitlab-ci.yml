variables:
    BASE_IMAGE: ubuntu:18.04
    BAZEL_VERSION: 0.28.1
    TERRAFORM_VERSION: 0.12.6
    TERRAFORM_URL: https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    AWS_IAM_URL: https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
    BADGE_URL: https://img.shields.io/badge
    KUBE_PROMETHEUS_SHA: a536114bf3e0e4c8f19a555685e95fb5c11e4ec8

# May help with future badge making:
# cat foo.log | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }'

stages:
  - build-images-and-terraform
  - monitoring
  - build-with-buildstream
  - build-with-bazel
  - build-with-recc
  - buildgrid-speedtest
  - buildbarn-speedtest
  - buildfarm-speedtest
  - buildbarn-speedtest-no-concurrency
  - buildfarm-speedtest-no-concurrency
  - cleanup-and-deploy

.before-badge-template: &before_badge |
  apt-get update && apt install -yq curl
  mkdir -p badges

.before-bazel-builds: &before_bazel_builds
  - mkdir -p ~/.docker
  - "echo {\\\"auths\\\": {\\\"index.docker.io\\\": {\\\"auth\\\": \\\"`echo -n $DOCKER_USER:$DOCKER_PASS | base64`\\\"}}} > ~/.docker/config.json"
  - apt update && apt install -yq pkg-config zip g++ zlib1g-dev unzip python curl git
  - apt install -y openjdk-8-jdk
  - echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list
  - curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
  - apt update && apt install -y bazel

.before-monitoring: &before_monitoring |
    apt update && apt install -yq git
    mkdir -p metrics

.before-terraform-builds: &before_terraform |
    apt update && apt install -yq wget unzip
    wget -O terraform.zip $TERRAFORM_URL
    unzip terraform.zip -d /bin
    terraform --version

.before-kubernetes-builds: &before_kubernetes |
    apt-get update && apt install -y apt-transport-https curl gnupg2
    curl -o aws-iam-authenticator $AWS_IAM_URL
    chmod +x ./aws-iam-authenticator
    mv aws-iam-authenticator /bin
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
    apt update
    apt install -y kubectl
    aws-iam-authenticator version
    apt install -y nodejs
    apt install -y npm
    npm i puppeteer
    apt install -y gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget

build-docker-bazel-build-wrapper:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - sed -i "s|0.28.1|$BAZEL_VERSION|g" docker/bazel/bazel-build.Dockerfile
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/bazel && docker build -t $DOCKER_ACCOUNT/bazel-build:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/bazel-build:latest -f bazel-build.Dockerfile .)
    - docker push $DOCKER_ACCOUNT/bazel-build:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/bazel-build:latest; fi

build-docker-buildgrid:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/buildgrid && docker build -f buildbox-worker.dockerfile -t $DOCKER_ACCOUNT/buildbox-worker:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/buildbox-worker:latest .)
    - docker push $DOCKER_ACCOUNT/buildbox-worker:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/buildbox-worker:latest; fi

build-docker-bazel-buildgrid-wrapper:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - sed -i "s|0.28.1|$BAZEL_VERSION|g" docker/bazel/bazel-build-buildgrid.Dockerfile
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/bazel && docker build -t $DOCKER_ACCOUNT/bazel-build-buildgrid:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/bazel-build-buildgrid:latest -f bazel-build-buildgrid.Dockerfile .)
    - docker push $DOCKER_ACCOUNT/bazel-build-buildgrid:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/bazel-build-buildgrid:latest; fi
  allow_failure: true

build-docker-buildstream-buildgrid:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - cd docker
    - docker build -t $DOCKER_ACCOUNT/buildstream-master-extra:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/buildstream-master-extra:latest -f buildstream.dockerfile . 
    - docker push $DOCKER_ACCOUNT/buildstream-master-extra:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/buildstream-master-extra:latest; fi

build-buildbarn-remote-execution:
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_bazel_builds
  script:
    - git clone https://github.com/buildbarn/bb-remote-execution
    - |
      for service in bb_worker bb_scheduler bb_runner_ubuntu16_04; do
          service_folder=`echo $service | cut -d _ -f -2`
          output_dir="bb-remote-execution/bazel-bin/cmd/${service_folder}"

          if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
              (cd bb-remote-execution && bazel build --host_force_python=PY2 //cmd/${service_folder}:${service}_container_push)
              sed -i $output_dir/${service}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:latest#"
              bash $output_dir/${service}_container_push
          fi

          (cd bb-remote-execution && bazel build --host_force_python=PY2 //cmd/${service_folder}:${service}_container_push)
          sed -i $output_dir/${service}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:$CI_PIPELINE_ID#"
          bash $output_dir/${service}_container_push
      done
  allow_failure: true

.build-buildbarn-template: &build-buildbarn-template
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_bazel_builds
  script:
    - git clone $REPO $SERVICE
    - output_dir="${SERVICE}/bazel-bin/cmd/${SERVICE}"

    - |
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
          (cd ${SERVICE} && bazel build --host_force_python=PY2 //cmd/${SERVICE}:${SERVICE}_container_push)
          sed -i $output_dir/${SERVICE}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:latest#"
          bash $output_dir/${SERVICE}_container_push
      fi

    - (cd ${SERVICE} && bazel build --host_force_python=PY2 //cmd/${SERVICE}:${SERVICE}_container_push)
    - sed -i $output_dir/${SERVICE}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:$CI_PIPELINE_ID#"
    - bash $output_dir/${SERVICE}_container_push
  allow_failure: true


build-buildbarn-storage:
  variables:
    REPO: https://github.com/buildbarn/bb-storage
    SERVICE: bb_storage
  <<: *build-buildbarn-template

build-recc:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/recc && docker build -t $DOCKER_ACCOUNT/recc-build:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/recc-build:latest -f recc-build.Dockerfile .)
    - docker push $DOCKER_ACCOUNT/recc-build:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/recc-build:latest; fi

terraform-infra:
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script:
    - *before_terraform
    - *before_kubernetes
  script:
    - cd terraform
    - terraform init
    - terraform apply -var cluster_id=$CI_PIPELINE_ID -auto-approve
  artifacts:
    paths:
      - terraform/
    untracked: true
    expire_in: 1 week

.re-deployment-and-build-template: &re_deployment_and_build_template |
      set -x
      export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
      kubectl kustomize kubernetes/server/overlays/$RE_NAME/$CLIENT_NAME | kubectl create -f -
      until kubectl -n $RE_NAME get pods --field-selector=status.phase!=Running 2>&1 | grep -q "No resources found."; do kubectl -n $RE_NAME get pods; sleep 10; done
      kubectl get all --all-namespaces
      # TODO: See issue #14
      sleep 30
      kubectl --namespace monitoring port-forward svc/grafana 3000 &
      kubectl create -f kubernetes/client/$CLIENT_NAME/$RE_NAME/$JOB_NAME.yml
      kubectl -n $RE_NAME describe jobs/$JOB_NAME
      until kubectl -n $RE_NAME get pods --field-selector=status.phase!=Running 2>&1 | grep -q "No resources found."; do kubectl -n $RE_NAME get pods; sleep 10; done
      kubectl -n $RE_NAME logs --follow jobs/$JOB_NAME
      kubectl -n $RE_NAME wait --for=condition=complete --timeout=5s job/$JOB_NAME
      node dev/grafana-snapshot.js 85a562078cdf77779eaa1add43ccec1e/kubernetes-compute-resources-namespace-pods $RE_NAME $(date +%s%3N -d -20minutes) $(date +%s%3N -d +20minutes) > metrics/$RE_NAME-cpu.txt
      cp dashboard.pdf metrics/$RE_NAME-cpu.pdf
      node dev/grafana-snapshot.js fa49a4706d07a042595b664c87fb33ea/kubernetes-nodes $RE_NAME $(date +%s%3N -d -20minutes) $(date +%s%3N -d +20minutes) > metrics/$RE_NAME-net-disk.txt
      cp dashboard.pdf metrics/$RE_NAME-net-disk.pdf
      set +x

.re-post-build-logging: &re_post_build_logging |
      mkdir logs
      for POD in $(kubectl get pods --namespace $RE_NAME -o name)
      do
        kubectl logs -n $RE_NAME --all-containers $POD > logs/$(echo $POD | sed "s|pod/||g")_log.txt;
      done

.re-cleanup-template: &re_cleanup_template |
      set -x
      export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
      kubectl get all --all-namespaces
      kubectl delete namespace $RE_NAME
      set +x

deploy-monitoring:
  stage: monitoring
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  before_script:
    - *before_kubernetes
    - *before_monitoring
  script:
    - set -x
    - export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
    - git clone https://github.com/coreos/kube-prometheus && cd kube-prometheus && git checkout $KUBE_PROMETHEUS_SHA && cd ..
    - cat kubernetes/monitoring/prometheus-adapter-rbac.yaml >> prometheus-adapter-clusterRole.yaml
    - kubectl create namespace monitoring
    - find kube-prometheus/manifests/ -type f -name '0prometheus-operator-*CustomResourceDefinition.yaml' -exec kubectl apply -f {} \;
    - until kubectl get customresourcedefinitions prometheusrules.monitoring.coreos.com ; do date; sleep 1; echo ""; done
    - until kubectl get customresourcedefinitions alertmanagers.monitoring.coreos.com ; do date; sleep 1; echo ""; done
    - until kubectl get customresourcedefinitions servicemonitors.monitoring.coreos.com ; do date; sleep 1; echo ""; done
    - until kubectl get customresourcedefinitions prometheuses.monitoring.coreos.com ; do date; sleep 1; echo ""; done
    - find kube-prometheus/manifests/ -type f ! -name '0prometheus-operator-*CustomResourceDefinition.yaml' -exec kubectl apply -f {} \;
    - until kubectl -n monitoring get pods --field-selector=status.phase!=Running 2>&1 | grep -q "No resources found."; do kubectl -n monitoring get pods; sleep 10; done
    - kubectl get all --all-namespaces
    - set +x

.before-buildbarn-builds: &before_buildbarn_builds |
      for service in frontend scheduler-ubuntu16-04 storage worker-ubuntu16-04; do
        sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/server/base/buildbarn/${service}.yaml
        sed -i "s|remoteapistesting|$DOCKER_ACCOUNT|g" kubernetes/server/base/buildbarn/${service}.yaml
      done


buildbarn-bazel-abseil:
  stage: build-with-bazel
  image: $BASE_IMAGE
  variables:
    RE_NAME: buildbarn
    CLIENT_NAME: bazel
    JOB_NAME: build-abseil
  dependencies:
    - terraform-infra
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - *before_buildbarn_builds
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildbarn/build-abseil.yml
  script:
    - *re_deployment_and_build_template
    - curl -o badges/buildbarn-bazel-deployed.svg $BADGE_URL/buildbarn-deployed-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  allow_failure: true

buildfarm-bazel-abseil:
  stage: build-with-bazel
  image: $BASE_IMAGE
  variables:
    RE_NAME: buildfarm
    CLIENT_NAME: bazel
    JOB_NAME: build-abseil
  dependencies:
    - terraform-infra
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildfarm/build-abseil.yml
  script:
    - *re_deployment_and_build_template
    - curl -o badges/buildfarm-bazel-deployed.svg $BADGE_URL/buildfarm-deployed-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/

  allow_failure: true

buildgrid-bazel-abseil:
  stage: build-with-bazel
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: bazel
    JOB_NAME: build-abseil
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildgrid/build-abseil.yml
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/server/base/buildgrid/buildbox-worker.yml
  script:
    - *re_deployment_and_build_template
    - curl -o badges/buildgrid-bazel-deployed.svg $BADGE_URL/buildgrid-deployed-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - logs/
  allow_failure: true

buildgrid-buildstream-autotools:
  stage: build-with-buildstream
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: buildstream
    JOB_NAME: build-autotools
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/buildstream/buildgrid/build-autotools.yml
    - sed -i "s|remoteapistesting|$DOCKER_ACCOUNT|g" kubernetes/client/buildstream/buildgrid/build-autotools.yml
  script:
    - *re_deployment_and_build_template
    - curl -o badges/buildgrid-buildstream-deployed.svg $BADGE_URL/buildgrid-deployed-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  allow_failure: true

buildbarn-bazel-bazel:
  stage: buildbarn-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildbarn
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - *before_buildbarn_builds
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildbarn/build-bazel.yml
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildbarn logs --tail=10 jobs/build-bazel | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o badges/buildbarn-time.svg $BADGE_URL/buildbarn_bazel_build-$time-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  only:
    refs:
      - master
  allow_failure: true

buildbarn-bazel-bazel-no-concurrency:
  stage: buildbarn-speedtest-no-concurrency
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildbarn
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - *before_buildbarn_builds
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildbarn/build-bazel.yml
    # Replace configuration value to set concurrency to 1
    - "sed -i 's|\"concurrency\": 4|\"concurrency\": 1|g' kubernetes/server/base/buildbarn/config-worker.yml"
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildbarn logs --tail=10 jobs/build-bazel | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o badges/buildbarn-time-concurrency-1.svg $BADGE_URL/buildbarn_bazel_build-$time-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  only:
    refs:
      - master
  allow_failure: true

buildfarm-bazel-bazel:
  stage: buildfarm-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildfarm
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildfarm/build-bazel.yml
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildfarm logs --tail=10 jobs/build-bazel | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o badges/buildfarm-time.svg $BADGE_URL/buildfarm_bazel_build-$time-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  only:
    refs:
      - master
  allow_failure: true

buildfarm-bazel-bazel-no-concurrency:
  stage: buildfarm-speedtest-no-concurrency
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildfarm
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildfarm/build-bazel.yml
    # Replace configuration value to set concurrency to 1
    - "sed -i 's|execute_stage_width: 4|execute_stage_width: 1|g' kubernetes/server/base/buildbarn/config-worker.yml"
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildfarm logs --tail=10 jobs/build-bazel | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o badges/buildfarm-time-concurrency-1.svg $BADGE_URL/buildfarm_bazel_build-$time-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  only:
    refs:
      - master
  allow_failure: true

buildgrid-bazel-bazel:
  stage: buildgrid-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildgrid/build-bazel.yml
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/server/base/buildgrid/buildbox-worker.yml
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildgrid logs --tail=10 jobs/build-bazel | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o badges/buildgrid-time.svg $BADGE_URL/buildgrid_bazel_build-$time-green.svg
    - *re_post_build_logging
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  only:
    refs:
      - master
  allow_failure: true

buildgrid-recc-gnuhello:
  stage: build-with-recc
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: recc
    JOB_NAME: build-gnuhello
  before_script:
    - *before_badge
    - *before_kubernetes
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/recc/buildgrid/build-gnuhello.yml
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildgrid logs --tail=10 jobs/$JOB_NAME | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o badges/buildgrid-recc-deployed.svg $BADGE_URL/buildgrid-deployed-green.svg
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
  allow_failure: true

cleanup-terraform-job:
  stage: cleanup-and-deploy
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  before_script:
    - *before_terraform
    - *before_kubernetes
  script:
    - cd terraform
    - terraform init
    - terraform destroy -var cluster_id=$CI_PIPELINE_ID -auto-approve
  variables:
    GIT_STRATEGY: none
  when: always

pages:
  stage: cleanup-and-deploy
  image: $BASE_IMAGE
  before_script:
    - *before_badge
  script:
    - |
      if [ ! -f "badges/buildbarn-bazel-deployed.svg" ]; then
        curl -o badges/buildbarn-bazel-deployed.svg $BADGE_URL/buildbarn-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildfarm-bazel-deployed.svg" ]; then
        curl -o badges/buildfarm-bazel-deployed.svg $BADGE_URL/buildfarm-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildgrid-bazel-deployed.svg" ]; then
        curl -o badges/buildgrid-bazel-deployed.svg $BADGE_URL/buildgrid-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildgrid-buildstream-deployed.svg" ]; then
        curl -o badges/buildgrid-buildstream-deployed.svg $BADGE_URL/buildgrid-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildgrid-recc-deployed.svg" ]; then
        curl -o badges/buildgrid-recc-deployed.svg $BADGE_URL/buildgrid-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildbarn-time.svg" ]; then
        curl -o badges/buildbarn-time.svg $BADGE_URL/buildbarn_bazel_build-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildfarm-time.svg" ]; then
        curl -o badges/buildfarm-time.svg $BADGE_URL/buildfarm_bazel_build-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildbarn-time-concurrency-1.svg" ]; then
        curl -o badges/buildbarn-time-concurrency-1.svg $BADGE_URL/buildbarn_bazel_build-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildfarm-time-concurrency-1.svg" ]; then
        curl -o badges/buildfarm-time-concurrency-1.svg $BADGE_URL/buildfarm_bazel_build-failed-red.svg
      fi
    - |
      if [ ! -f "badges/buildgrid-time.svg" ]; then
        curl -o badges/buildgrid-time.svg $BADGE_URL/buildgrid_bazel_build-failed-red.svg
      fi
    - mkdir public
    - cp badges/* public/
  artifacts:
    name: pages
    paths:
    - public/
  when: always
  # NOTE: Never enable this job in WIP branches!!
  only:
    refs:
      - master
