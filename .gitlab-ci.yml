variables:
    BASE_IMAGE: ubuntu:18.04
    BAZEL_VERSION: 1.1.0
    TERRAFORM_VERSION: 0.12.13
    TERRAFORM_URL: https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    AWS_IAM_URL: https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
    BADGE_URL: https://img.shields.io/badge
    KUBE_PROMETHEUS_SHA: a536114bf3e0e4c8f19a555685e95fb5c11e4ec8

# May help with future badge making:
# cat foo.log | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }'

stages:
  - build-images-and-terraform
  - monitoring
  - build-with-buildstream
  - buildbarn-build-with-bazel
  - buildfarm-build-with-bazel
  - buildgrid-build-with-bazel
  - build-with-recc
  - buildgrid-speedtest
  - buildbarn-speedtest
  - buildfarm-speedtest
  - buildbarn-speedtest-no-concurrency
  - buildfarm-speedtest-no-concurrency
  - cleanup-and-deploy
  - wiki

.before-badge-template: &before_badge |
  apt-get update && apt install -yq curl
  mkdir -p badges

.before-bazel-builds: &before_bazel_builds
  - mkdir -p ~/.docker
  - "echo {\\\"auths\\\": {\\\"index.docker.io\\\": {\\\"auth\\\": \\\"`echo -n $DOCKER_USER:$DOCKER_PASS | base64`\\\"}}} > ~/.docker/config.json"
  - apt update && apt install -yq pkg-config zip g++ zlib1g-dev unzip python curl git wget
  - wget "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh"
  - chmod +x "bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh"
  - "./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh"

.before-monitoring: &before_monitoring |
    apt update && apt install -yq git
    mkdir -p metrics

.before-terraform-builds: &before_terraform |
    apt update && apt install -yq wget unzip
    wget -O terraform.zip $TERRAFORM_URL
    unzip terraform.zip -d /bin
    terraform --version

.before-kubernetes-builds: &before_kubernetes |
    apt-get update && apt install -y apt-transport-https curl gnupg2
    curl -o aws-iam-authenticator $AWS_IAM_URL
    chmod +x ./aws-iam-authenticator
    mv aws-iam-authenticator /bin
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
    apt update
    apt install -y kubectl
    aws-iam-authenticator version
    apt install -y nodejs
    apt install -y npm
    npm i puppeteer
    apt install -y gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget

build-docker-bazel-build-wrapper:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - sed -i "s|0.28.1|$BAZEL_VERSION|g" docker/bazel/bazel-build.Dockerfile
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/bazel && docker build -t $DOCKER_ACCOUNT/bazel-build:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/bazel-build:latest -f bazel-build.Dockerfile .)
    - docker push $DOCKER_ACCOUNT/bazel-build:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/bazel-build:latest; fi

build-docker-buildgrid:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/buildgrid && docker build -f buildbox-worker.dockerfile -t $DOCKER_ACCOUNT/buildbox-worker:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/buildbox-worker:latest .)
    - docker push $DOCKER_ACCOUNT/buildbox-worker:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/buildbox-worker:latest; fi

build-docker-bazel-buildgrid-wrapper:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - sed -i "s|0.28.1|$BAZEL_VERSION|g" docker/bazel/bazel-build-buildgrid.Dockerfile
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/bazel && docker build -t $DOCKER_ACCOUNT/bazel-build-buildgrid:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/bazel-build-buildgrid:latest -f bazel-build-buildgrid.Dockerfile .)
    - docker push $DOCKER_ACCOUNT/bazel-build-buildgrid:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/bazel-build-buildgrid:latest; fi
  allow_failure: true

build-buildbarn-remote-execution:
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_bazel_builds
  script:
    - git clone https://github.com/buildbarn/bb-remote-execution
    - |
      for service in bb_worker bb_scheduler bb_runner_ubuntu16_04; do
          service_folder=`echo $service | cut -d _ -f -2`
          output_dir="bb-remote-execution/bazel-bin/cmd/${service_folder}"

          if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
              (cd bb-remote-execution && bazel build --host_force_python=PY2 //cmd/${service_folder}:${service}_container_push)
              sed -i $output_dir/${service}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:latest#"
              bash $output_dir/${service}_container_push
          fi

          (cd bb-remote-execution && bazel build --host_force_python=PY2 //cmd/${service_folder}:${service}_container_push)
          sed -i $output_dir/${service}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:$CI_PIPELINE_ID#"
          bash $output_dir/${service}_container_push
      done
  allow_failure: true

.build-buildbarn-template: &build-buildbarn-template
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_bazel_builds
  script:
    - git clone $REPO $SERVICE
    - output_dir="${SERVICE}/bazel-bin/cmd/${SERVICE}"

    - |
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
          (cd ${SERVICE} && bazel build --host_force_python=PY2 //cmd/${SERVICE}:${SERVICE}_container_push)
          sed -i $output_dir/${SERVICE}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:latest#"
          bash $output_dir/${SERVICE}_container_push
      fi

    - (cd ${SERVICE} && bazel build --host_force_python=PY2 //cmd/${SERVICE}:${SERVICE}_container_push)
    - sed -i $output_dir/${SERVICE}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:$CI_PIPELINE_ID#"
    - bash $output_dir/${SERVICE}_container_push
  allow_failure: true


build-buildbarn-storage:
  variables:
    REPO: https://github.com/buildbarn/bb-storage
    SERVICE: bb_storage
  <<: *build-buildbarn-template

build-docker-recc-buildgrid:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/recc && docker build -t $DOCKER_ACCOUNT/recc-build:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/recc-build:latest -f recc-build.Dockerfile .)
    - docker push $DOCKER_ACCOUNT/recc-build:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/recc-build:latest; fi

terraform-infra:
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script:
    - *before_terraform
    - *before_kubernetes
  script:
    - cd terraform
    - terraform init
    - terraform apply -var cluster_id=$CI_PIPELINE_ID -auto-approve
  artifacts:
    paths:
      - terraform/
    untracked: true
    expire_in: 1 week

.re-deploy-server-template: &re_deploy_server |
      set -x
      export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
      kubectl kustomize kubernetes/server/overlays/$RE_NAME/$CLIENT_NAME | kubectl create -f -
      ./dev/wait-kubernetes-pods.sh $RE_NAME
      kubectl get all --all-namespaces
      # TODO: See issue #14
      sleep 30
      kubectl --namespace monitoring port-forward svc/grafana 3000 &
      set +x

.re-run-job: &re_run_job |
      set -x
      export START_TIME=$(date +%s%3N)
      kubectl create -f kubernetes/client/$CLIENT_NAME/$RE_NAME/$JOB_NAME.yml
      kubectl -n $RE_NAME describe jobs/$JOB_NAME
      ./dev/wait-kubernetes-pods.sh $RE_NAME
      kubectl -n $RE_NAME logs --follow jobs/$JOB_NAME
      kubectl -n $RE_NAME wait --for=condition=complete --timeout=5s job/$JOB_NAME
      export END_TIME=$(date +%s%3N)
      node dev/grafana-snapshot.js 85a562078cdf77779eaa1add43ccec1e/kubernetes-compute-resources-namespace-pods $RE_NAME $START_TIME $END_TIME > metrics/$JOB_NAME-cpu.txt
      cp dashboard.pdf metrics/$JOB_NAME-cpu.pdf
      node dev/grafana-snapshot.js fa49a4706d07a042595b664c87fb33ea/kubernetes-nodes $RE_NAME $START_TIME $END_TIME > metrics/$JOB_NAME-net-disk.txt
      cp dashboard.pdf metrics/$JOB_NAME-net-disk.pdf
      set +x

.time-bazel-job: &re_time_bazel_job |
      export "time=$(./dev/time_script.sh $RE_NAME $CLIENT_NAME $JOB_NAME)"
      curl -o badges/${RE_NAME}${BADGE_SUFFIX:-}-time.svg ${BADGE_URL}/${RE_NAME}_${CLIENT_NAME}${BADGE_SUFFIX:-}-${time}-green.svg

.re-prepare-incremental-job: &re_prepare_incremental_job |
      set -x
      export INC_JOB_NAME=$JOB_NAME-incremental
      export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
      # Delete previous job
      kubectl delete -n $RE_NAME jobs.batch $JOB_NAME
      kubectl --namespace monitoring port-forward svc/grafana 3000 &
      # Copy and alter job resource file for different bazel version and job name
      cp kubernetes/client/$CLIENT_NAME/$RE_NAME/$JOB_NAME.yml kubernetes/client/$CLIENT_NAME/$RE_NAME/$INC_JOB_NAME.yml
      sed -i "s|1.1.0|1.2.0|g" kubernetes/client/$CLIENT_NAME/$RE_NAME/$INC_JOB_NAME.yml
      sed -i "s|$JOB_NAME|$INC_JOB_NAME|g" kubernetes/client/$CLIENT_NAME/$RE_NAME/$INC_JOB_NAME.yml
      # Set JOB_NAME for re_run_job internals
      export JOB_NAME=$INC_JOB_NAME
      set +x

.re-post-build-logging: &re_post_build_logging |
      mkdir logs
      export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
      for POD in $(kubectl get pods --namespace $RE_NAME -o name)
      do
        kubectl logs -n $RE_NAME --all-containers $POD > logs/$(echo $POD | sed "s|pod/||g")_log.txt;
      done

.re-cleanup-template: &re_cleanup_template |
      set -x
      export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
      kubectl get all --all-namespaces
      kubectl delete namespace $RE_NAME
      set +x

deploy-monitoring:
  stage: monitoring
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  before_script:
    - *before_kubernetes
    - *before_monitoring
  script:
    - set -x
    - export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
    - git clone https://github.com/coreos/kube-prometheus && cd kube-prometheus && git checkout $KUBE_PROMETHEUS_SHA && cd ..
    - cat kubernetes/monitoring/prometheus-adapter-rbac.yaml >> prometheus-adapter-clusterRole.yaml
    - kubectl create namespace monitoring
    - find kube-prometheus/manifests/ -type f -name '0prometheus-operator-*CustomResourceDefinition.yaml' -exec kubectl apply -f {} \;
    - until kubectl get customresourcedefinitions prometheusrules.monitoring.coreos.com ; do date; sleep 1; echo ""; done
    - until kubectl get customresourcedefinitions alertmanagers.monitoring.coreos.com ; do date; sleep 1; echo ""; done
    - until kubectl get customresourcedefinitions servicemonitors.monitoring.coreos.com ; do date; sleep 1; echo ""; done
    - until kubectl get customresourcedefinitions prometheuses.monitoring.coreos.com ; do date; sleep 1; echo ""; done
    - find kube-prometheus/manifests/ -type f ! -name '0prometheus-operator-*CustomResourceDefinition.yaml' -exec kubectl apply -f {} \;
    - ./dev/wait-kubernetes-pods.sh monitoring
    - kubectl get all --all-namespaces
    - set +x

deploy-jaeger:
  stage: monitoring
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  before_script:
    - *before_kubernetes
    - *before_monitoring
  script:
    - set -x
    - export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
    - kubectl create namespace jaeger
    - kubectl create -f kubernetes/monitoring/jaeger-configuration.yaml
    - kubectl create -f kubernetes/monitoring/jaeger-cassandra.yaml
    - until kubectl -n jaeger get pods --field-selector=status.phase==Succeeded 2>&1 | grep -q "jaeger-cassandra-schema-job"; do kubectl -n jaeger get pods; sleep 10; done
    - kubectl -n jaeger delete job jaeger-cassandra-schema-job
    - kubectl create -f kubernetes/monitoring/jaeger-monitoring.yaml
    - until kubectl -n jaeger get pods --field-selector=status.phase!=Running 2>&1 | grep -q "No resources found."; do kubectl -n jaeger get pods; sleep 10; done
    - kubectl get all --all-namespaces
    - set +x

.before-buildbarn-builds: &before_buildbarn_builds |
      for service in frontend scheduler-ubuntu16-04 storage worker-ubuntu16-04; do
        sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/server/base/buildbarn/${service}.yaml
        sed -i "s|remoteapistesting|$DOCKER_ACCOUNT|g" kubernetes/server/base/buildbarn/${service}.yaml
      done


buildbarn-bazel-abseil:
  stage: buildbarn-build-with-bazel
  image: $BASE_IMAGE
  variables:
    RE_NAME: buildbarn
    CLIENT_NAME: bazel
    JOB_NAME: build-abseil
  dependencies:
    - terraform-infra
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - *before_buildbarn_builds
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildbarn/build-abseil.yml
  script:
    - *re_deploy_server
    - *re_run_job
    - curl -o badges/buildbarn-bazel-deployed.svg $BADGE_URL/buildbarn-deployed-green.svg
    - dev/save-traces.sh
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
      - traces/
  allow_failure: true

buildfarm-bazel-abseil:
  stage: buildfarm-build-with-bazel
  image: $BASE_IMAGE
  variables:
    RE_NAME: buildfarm
    CLIENT_NAME: bazel
    JOB_NAME: build-abseil
  dependencies:
    - terraform-infra
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildfarm/build-abseil.yml
  script:
    - *re_deploy_server
    - *re_run_job
    - curl -o badges/buildfarm-bazel-deployed.svg $BADGE_URL/buildfarm-deployed-green.svg
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/

  allow_failure: true

buildgrid-bazel-abseil:
  stage: buildgrid-build-with-bazel
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: bazel
    JOB_NAME: build-abseil
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildgrid/build-abseil.yml
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/server/base/buildgrid/buildbox-worker.yml
  script:
    - *re_deploy_server
    - *re_run_job
    - curl -o badges/buildgrid-bazel-deployed.svg $BADGE_URL/buildgrid-deployed-green.svg
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - logs/
  allow_failure: true

buildgrid-buildstream-autotools:
  stage: build-with-buildstream
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: buildstream
    JOB_NAME: build-autotools
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
  script:
    - *re_deploy_server
    - *re_run_job
    - curl -o badges/buildgrid-buildstream-deployed.svg $BADGE_URL/buildgrid-deployed-green.svg
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  allow_failure: true

buildbarn-bazel-bazel:
  stage: buildbarn-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildbarn
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - *before_buildbarn_builds
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildbarn/build-bazel.yml
  script:
    - *re_deploy_server
    - *re_run_job
    - *re_time_bazel_job
    - dev/save-traces.sh
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
      - traces/
  only:
    refs:
      - master
  allow_failure: true

buildbarn-bazel-bazel-no-concurrency:
  stage: buildbarn-speedtest-no-concurrency
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildbarn
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
    BADGE_SUFFIX: -concurrency-1
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - *before_buildbarn_builds
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildbarn/build-bazel.yml
    # Replace configuration value to set concurrency to 1
    - "sed -i 's|\"concurrency\": 4|\"concurrency\": 1|g' kubernetes/server/base/buildbarn/config-worker.yml"
  script:
    - *re_deploy_server
    - *re_run_job
    - *re_time_bazel_job
    - mv metrics/$JOB_NAME-cpu.txt metrics/$JOB_NAME-concurrency-1-cpu.txt
    - mv metrics/$JOB_NAME-cpu.pdf metrics/$JOB_NAME-concurrency-1-cpu.pdf
    - mv metrics/$JOB_NAME-net-disk.txt metrics/$JOB_NAME-concurrency-1-net-disk.txt
    - mv metrics/$JOB_NAME-net-disk.pdf metrics/$JOB_NAME-concurrency-1-net-disk.pdf
    - dev/save-traces.sh
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
      - traces/
  only:
    refs:
      - master
  allow_failure: true

buildfarm-bazel-bazel:
  stage: buildfarm-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildfarm
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildfarm/build-bazel.yml
  script:
    - *re_deploy_server
    - *re_run_job
    - *re_time_bazel_job
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  only:
    refs:
      - master
  allow_failure: true

buildfarm-bazel-bazel-no-concurrency:
  stage: buildfarm-speedtest-no-concurrency
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildfarm
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
    BADGE_SUFFIX: -concurrency-1
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildfarm/build-bazel.yml
    # Replace configuration value to set concurrency to 1
    - "sed -i 's|execute_stage_width: 4|execute_stage_width: 1|g' kubernetes/server/base/buildfarm/config-worker.yml"
  script:
    - *re_deploy_server
    - *re_run_job
    - *re_time_bazel_job
    - mv metrics/$JOB_NAME-cpu.txt metrics/$JOB_NAME-concurrency-1-cpu.txt
    - mv metrics/$JOB_NAME-cpu.pdf metrics/$JOB_NAME-concurrency-1-cpu.pdf
    - mv metrics/$JOB_NAME-net-disk.txt metrics/$JOB_NAME-concurrency-1-net-disk.txt
    - mv metrics/$JOB_NAME-net-disk.pdf metrics/$JOB_NAME-concurrency-1-net-disk.pdf
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  only:
    refs:
      - master
  allow_failure: true

buildgrid-bazel-bazel:
  stage: buildgrid-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: bazel
    JOB_NAME: build-bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/bazel/buildgrid/build-bazel.yml
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/server/base/buildgrid/buildbox-worker.yml
  script:
    - *re_deploy_server
    - *re_run_job
    - *re_time_bazel_job
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  only:
    refs:
      - master
  allow_failure: true

buildgrid-recc-gnuhello:
  stage: build-with-recc
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: recc
    JOB_NAME: build-gnuhello
  before_script:
    - *before_badge
    - *before_kubernetes
    - *before_monitoring
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/client/recc/buildgrid/build-gnuhello.yml
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/server/base/buildgrid/buildbox-worker.yml
  script:
    - *re_deploy_server
    - *re_run_job
    - curl -o badges/buildgrid-recc-deployed.svg $BADGE_URL/buildgrid-deployed-green.svg
  after_script:
    - *re_post_build_logging
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - badges/
      - metrics/
      - logs/
  allow_failure: true

cleanup-terraform-job:
  stage: cleanup-and-deploy
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  before_script:
    - *before_terraform
    - *before_kubernetes
  script:
    - cd terraform
    - terraform init
    - terraform destroy -var cluster_id=$CI_PIPELINE_ID -auto-approve
  variables:
    GIT_STRATEGY: none
  when: always

wiki:
  stage: wiki
  image: $BASE_IMAGE
  before_script:
    - *before_badge
    - *before_monitoring
  script:
    - git config --global user.email "remoteapitestingci@gmail.com"
    - git config --global user.name "remoteapitesting CI"
    - git clone https://remoteapitesting:$ci_wiki_token@gitlab.com/remote-apis-testing/remote-apis-testing.wiki.git
    - cd remote-apis-testing.wiki
    - mkdir -p $CI_PIPELINE_ID/metrics && cp ../metrics/* $CI_PIPELINE_ID/metrics/
    - mkdir -p $CI_PIPELINE_ID/badges && cp ../badges/* $CI_PIPELINE_ID/badges/
    - PIPE_SYM="|"
    - DATE_SYM=`date +%d-%m-%y`
    - PIPELINE_SYM="[Pipeline](https://gitlab.com/remote-apis-testing/remote-apis-testing/pipelines/$CI_PIPELINE_ID)"
    - WIKI_URL="https://gitlab.com/remote-apis-testing/remote-apis-testing/wikis/$CI_PIPELINE_ID"
    - BR="<br>"
    - |
      for server in buildbarn buildfarm buildgrid buildbarn-concurrency-1 buildfarm-concurrency-1 ; do
        BADGE="![]($WIKI_URL/badges/$server-time.svg)"
        CPU_PDF="CPU [PDF]($WIKI_URL/metrics/$server-cpu.pdf)"
        IO_PDF="IO [PDF]($WIKI_URL/metrics/$server-net-disk.pdf)"
        if [ -f $CI_PIPELINE_ID/metrics/$server-cpu.txt ]; then
          CPU_DASH_URL=`cat $CI_PIPELINE_ID/metrics/$server-cpu.txt`
        fi
        if [ -f $CI_PIPELINE_ID/metrics/$server-net-disk.txt ]; then
          IO_DASH_URL=`cat $CI_PIPELINE_ID/metrics/$server-net-disk.txt`
        fi
        if [ ! -z $CPU_DASH_URL ]; then
          CPU_DASH="[Dash]($CPU_DASH_URL)"
        else
          CPU_DASH="N/A"
        fi
        if [ ! -z $IO_DASH_URL ]; then
          IO_DASH="[Dash]($IO_DASH_URL)"
        else
          IO_DASH="N/A"
        fi
        BUILD_TEXT="$BUILD_TEXT$BADGE$BR$CPU_PDF $CPU_DASH$BR$IO_PDF $IO_DASH$PIPE_SYM"
      done
    - sed -i "/-|$/a$PIPE_SYM$DATE_SYM$BR$PIPELINE_SYM$PIPE_SYM$BUILD_TEXT" metrics.md
    - git add .
    - git commit -m "update wiki for $CI_PIPELINE_ID"
    - git push https://remoteapitesting:$ci_wiki_token@gitlab.com/remote-apis-testing/remote-apis-testing.wiki.git
  only:
    refs:
      - master

pages:
  stage: cleanup-and-deploy
  image: $BASE_IMAGE
  before_script:
    - *before_badge
  script:
    - ./dev/badge_script.sh $BADGE_URL
    - mkdir public
    - cp badges/* public/
  artifacts:
    name: pages
    paths:
    - public/
    - badges/
  when: always
  # NOTE: Never enable this job in WIP branches!!
  only:
    refs:
      - master
